const db = require("../db/queries");

// --- CATEGORIES ---

async function getCategories(req, res) {
  try {
    const categories = await db.getAllCategories();
    res.render("index", { categories: categories });
  } catch {
    res.redirect("/");
  }
}

async function browseCategories(req, res) {
  try {
    const categories = await db.getAllCategories();
    res.render("categories/index", { categories: categories });
  } catch {
    res.redirect("/");
  }
}

async function newCategoryForm(req, res) {
  const name = "";
  res.render("categories/new", { name: name });
}

async function creatNewCategory(req, res) {
  const categoryName = req.body.name;
  try {
    await db.addCategory(categoryName);
    res.redirect("/");
  } catch {
    res.render("categories/new", {
      name: categoryName,
      errorMessage: "Error creating Category",
    });
  }
}

async function renderCategory(req, res) {
  const categoryName = req.params.id;
  try {
    const category = await db.getCategoryByName(categoryName);
    const tours = await db.getTourByCategory(categoryName);
    res.render("categories/category", {
      category: category,
      tours: tours,
    });
  } catch (e) {
    console.error(e.message);
    res.redirect("/");
  }
}

async function editCategoryForm(req, res) {
  try {
    const name = req.params.id;
    res.render("categories/edit", { name: name });
  } catch {
    res.redirect("/categories");
  }
}

async function editCategory(req, res) {
  const oldName = req.params.id;
  const newName = req.body.name;
  try {
    await db.updateCategory(newName, oldName);
    res.redirect("/");
  } catch (e) {
    console.error(e.message);
    res.render("categories/edit", {
      name: oldName,
      errorMessage: "Error editing Category",
    });
  }
}

async function deleteCategory(req, res) {
  const categoryName = req.params.id;
  const tours = await db.getTourByCategory(categoryName);
  const categories = await db.getAllCategories();
  if (tours.length > 0) {
    res.render("categories/index", {
      categories: categories,
      errorMessage: "Cannot delete non-empty category. Delete tours before",
    });
  } else if (tours.length === 0) {
    try {
      await db.removeCategory(categoryName);
      res.redirect("/");
    } catch (e) {
      console.error(e.message);
      res.render("categories/index", {
        categories: categories,
        errorMessage: "Error deliting Category",
      });
    }
  }
}

// --- TOURS ---

async function getTours(req, res) {
  try {
    const tours = await db.getAllTours();
    res.render("tours/index", { tours: tours });
  } catch {
    res.redirect("/");
  }
}

async function newTourForm(req, res) {
  const tour = [];
  try {
    const categories = await db.getAllCategories();
    res.render("tours/new", { categories: categories, tour: tour });
  } catch (e) {
    console.error(e.message);
    res.redirect("/tours");
  }
}

async function creatNewTour(req, res) {
  const { title, description, location, imageurl, categoryId } = req.body;
  try {
    await db.addTour(title, description, location, imageurl, categoryId);
    res.redirect("/tours");
  } catch (e) {
    console.error(e.message);
    res.render("tours/new", {
      errorMessage: "Error creating Tour",
    });
  }
}

async function renderTour(req, res) {
  const tourId = req.params.id;
  try {
    const tour = await db.getTourById(tourId);
    if (tour.length > 0) {
      res.render("tours/tour", {
        tour: tour,
      });
    } else {
      res.redirect("/tours");
    }
  } catch (e) {
    console.error(e.message);
    res.redirect("/tours");
  }
}

async function editTourForm(req, res) {
  const tourId = req.params.id;
  try {
    const categories = await db.getAllCategories();
    const tour = await db.getTourById(tourId);
    res.render("tours/edit", {
      categories: categories,
      tour: tour,
    });
  } catch (e) {
    console.error(e.message);
    res.redirect("/tours");
  }
}

async function editTour(req, res) {
  const tourId = req.params.id;
  const { title, description, location, imageurl, categoryId } = req.body;
  try {
    await db.updateTour(
      title,
      description,
      location,
      imageurl,
      categoryId,
      tourId,
    );
    res.redirect("/tours");
  } catch (e) {
    console.error(e.message);
    res.render("tours/edit", {
      errorMessage: "Error editing Tour",
    });
  }
}

async function deleteTour(req, res) {
  const tourId = req.params.id;
  const tours = await db.getAllTours();
  try {
    await db.removeTour(tourId);
    res.redirect("/");
  } catch (e) {
    console.error(e.message);
    res.render("tours/index", {
      tours: tours,
      errorMessage: "Error deliting Tour",
    });
  }
}

module.exports = {
  getCategories,
  browseCategories,
  newCategoryForm,
  creatNewCategory,
  renderCategory,
  getTours,
  renderTour,
  newTourForm,
  creatNewTour,
  editCategoryForm,
  editCategory,
  deleteCategory,
  editTourForm,
  editTour,
  deleteTour,
};
